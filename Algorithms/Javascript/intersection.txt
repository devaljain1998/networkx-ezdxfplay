var assert = require("assert");

// Library Function:

// Given three colinear points p, q, r, the function checks if
// point q lies on line segment 'pr'
const onSegment = (p, q, r) => {
  if (
    q.x <= Math.max(p.x, r.x) &&
    q.x >= Math.min(p.x, r.x) &&
    q.y <= Math.max(p.y, r.y) &&
    q.y >= Math.min(p.y, r.y)
  )
    return true;
  return false;
};

// To find orientation of ordered triplet (p, q, r).
// The function returns following values
// 0 --> p, q and r are colinear
// 1 --> Clockwise
// 2 --> Counterclockwise
const getOrientation = (p, q, r) => {
  let val = (q.y - p.y) * (r.x - q.x) - (q.x - p.x) * (r.y - q.y);

  if (val === 0) return 0; // colinear
  return val > 0 ? 1 : 2; // clock or counterclock wise
};

// The function that returns true if line segment 'p1q1'
// and 'p2q2' intersect.
const doIntersect = (p1, q1, p2, q2) => {
  console.log("Inside doIntersect", { p1, q1, p2, q2 });
  // Find the four orientations needed for general and
  // special cases
  let o1 = getOrientation(p1, q1, p2);
  let o2 = getOrientation(p1, q1, q2);
  let o3 = getOrientation(p2, q2, p1);
  let o4 = getOrientation(p2, q2, q1);

  console.log({ o1, o2, o3, o4 });

  // General case
  if (o1 !== o2 && o3 !== o4) return true;

  // Special Cases
  // p1, q1 and p2 are colinear and p2 lies on segment p1q1
  if (o1 === 0 && onSegment(p1, p2, q1)) return true;

  // p1, q1 and p2 are colinear and q2 lies on segment p1q1
  if (o2 === 0 && onSegment(p1, q2, q1)) return true;

  // p2, q2 and p1 are colinear and p1 lies on segment p2q2
  if (o3 === 0 && onSegment(p2, p1, q2)) return true;

  // p2, q2 and q1 are colinear and q1 lies on segment p2q2
  if (o4 === 0 && onSegment(p2, q1, q2)) return true;

  console.log("Inside doIntersect none returned true.");

  return false; // Doesn't fall in any of the above cases
};

// line intercept math by Paul Bourke http://paulbourke.net/geometry/pointlineplane/
// Determine the intersection point of two line segments
// Return FALSE if the lines don't intersect
function getIntersectionPoint(x1, y1, x2, y2, x3, y3, x4, y4) {
  // Check if none of the lines are of length 0
  if ((x1 === x2 && y1 === y2) || (x3 === x4 && y3 === y4)) {
    return false;
  }

  denominator = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);

  // Lines are parallel
  if (denominator === 0) {
    return false;
  }

  let ua = ((x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3)) / denominator;
  let ub = ((x2 - x1) * (y1 - y3) - (y2 - y1) * (x1 - x3)) / denominator;

  // is the intersection along the segments
  if (ua < 0 || ua > 1 || ub < 0 || ub > 1) {
    return false;
  }

  // Return a object with the x and y coordinates of the intersection
  let x = x1 + ua * (x2 - x1);
  let y = y1 + ua * (y2 - y1);

  return { x, y };
}

/*
BLUEPRINT:

line: start, end

const getIntersection(line1, beams) -> 



*/
const getSleevePoints = (line, beams) => {
  let sleeves = [];

  p1 = line[0];
  q1 = line[1];

  beams.forEach((beam) => {
    p2 = beam[0];
    q2 = beam[1];

    // if (doIntersect(p1, q1, p2, q2)) {
    //   const intersectionPoint = getIntersectionPoint(
    //     p1.x,
    //     p1.y,
    //     q1.x,
    //     q1.y,
    //     p2.x,
    //     p2.y,
    //     q2.x,
    //     q2.y
    //   );
    //   sleeves.push(intersectionPoint);
    // }

    const intersectionPoint = getIntersectionPoint(p1.x, p1.y, q1.x, q1.y, p2.x, p2.y, q2.x, q2.y)
    if (intersectionPoint !== false) {
        sleeves.push(intersectionPoint)
    }
  });

  return sleeves;
};

/*


detectPointInPolygon

*/

const isPointInsidePolygon = (p, polygon) => {
  // Logic:
  const n = polygon.length;

  if (n < 3) return false;

  let extreme = { x: 10000, y: p.y };

  let count = 0;
  let i = 0;

  console.log("Inside point inside polygon", { n, extreme, count, i });

  do {
    next = (i + 1) % n;

    console.log({ i, next, count });

    if (doIntersect(polygon[i], polygon[next], p, extreme)) {
      console.log(
        `Lines ${(polygon[i], polygon[next], p, extreme)} intersects`
      );
      if (getOrientation(polygon[i], p, polygon[next]) === 0)
        return onSegment(polygon[i], p, polygon[next]);

      count++;
    }
    console.log(
      `Lines`,
      polygon[i],
      polygon[next],
      p,
      extreme,
      "does not intersects"
    );

    i = next;
  } while (i != 0);
  // Return true if count is odd, false otherwise
  return count & 1;
};

/*

nearestTwoLinesToAPoint

*/
/*

nearestLineToAPoint


*/

const getLinesSortedByDistance = (lines) => {
  console.log(`Original lines:`, lines);
  var getDist = (x, y, x1, y1, x2, y2) => {
    return (
      Math.abs(x * (y2 - y1) - y * (x2 - x1) + x2 * y1 - y2 * x1) /
      Math.sqrt(Math.pow((y2 - y1), 2) + Math.pow((x2 - x1), 2))
    );
  };

  var comparator = (a, b) => {
    distA = getDist(point.x, point.y, a[0].x, a[0].y, a[1].x, a[1].y);
    distB = getDist(point.x, point.y, b[0].x, b[0].y, b[1].x, b[1].y);

    if (distA == distB) return 0;
    return distA < distB ? -1 : 1;
  };

  lines.sort(comparator);

  console.log(`After sorting:`, lines);

  return lines;
};

const getNearestLineToAPoint = (point, lines) => {
  lines = getLinesSortedByDistance(lines);
  // Returning the first lines
  return { firstNearestLine: lines[0] };
};

const getNearestTwoLinesToAPoint = (point, lines) => {
  // Edge cases
  if (lines.length < 2) {
    throw RangeError("The length of the lines should be atleast two.");
  }

  let referenceLines = [...lines];

  // const firstNearestLine = getNearestLineToAPoint(point, referenceLines)

  // // Removing the value from the refernce line
  // const index = referenceLines.indexOf(firstNearestLine);
  // if (index > -1) {
  //     referenceLines.splice(index, 1);
  // }

  // const secondNearestLine = getNearestLineToAPoint(point, referenceLines)

  // sorting the reference lines:
  referenceLines = getLinesSortedByDistance(referenceLines);

  const firstNearestLine = referenceLines[0];
  const secondNearestLine = referenceLines[1];

  return { firstNearestLine, secondNearestLine };
};

const testHelloWorld = () => {
  debugger;
  console.log("Hello World, the function is working.");
};

// module.exports = {
//     getIntersectionPoint,  getSleevePoints,  isPointInsidePolygon, getNearestLineToAPoint, getNearestTwoLinesToAPoint, testHelloWorld
// }

//export {getIntersectionPoint,  getSleevePoints,  isPointInsidePolygon, getNearestLineToAPoint, getNearestTwoLinesToAPoint, testHelloWorld};

// Tests:
function Point(x, y) {
  return { x, y };
}

function Line(x1, y1, x2, y2) {
  return [Point(x1, y1), Point(x2, y2)];
}

function testPointInPolygon() {
  debugger;
  // polygon = [Line(0, 0, 5, 0), Line(5, 0, 5, 5), Line(5, 5, 0, 5), Line(0, 5, 0, 0)]
  polygon = [Point(0, 0), Point(5, 0), Point(5, 5), Point(0, 5)];
  point1 = Point(1, 1);
  console.log({ polygon, point1 });
  console.log("Answer for point1: ", isPointInsidePolygon(point1, polygon));
  assert(
    isPointInsidePolygon(point1, polygon) === 1,
    `The function: isPointInPolygon is not working properly for case ${
      (point1.x, point1.y)
    }.`
  );

  point2 = Point(6, 5);
  console.log("Answer for point2: ", isPointInsidePolygon(point2, polygon));
  assert(
    isPointInsidePolygon(point2, polygon) === 0,
    `The function: isPointInPolygon is not working properly for case ${point2}.`
  );

  console.log("\nIs point in Polygon working fine!\n\n");
}
// testPointInPolygon();

function testIntersection() {
    intersectionPoint = getIntersectionPoint(0,0, 5,0, 2.5,2.5, 2.5,-2.5)
    console.log("Intersection Point: ", intersectionPoint);
}
// testIntersection();


function testGetNearestLine() {
    lines = [Line(2, 2, 2, -2), Line(1, 1, 1, -1),  Line(3, 3, 3, -3), Line(4, 4, 4, -4)]
    point = Point(0, 0)

    console.log('lines', lines, 'point', point)
    
    var getDist1 = (x, y, x1, y1, x2, y2) => {
        console.log('Inside:')
        console.log({x, y, x1, y1, x2, y2})

        console.log('Absolute: ', (Math.abs(x * (y2 - y1) - y * (x2 - x1) + x2 * y1 - y2 * x1)))
        console.log('SQRT: ', Math.sqrt(Math.pow((y2 - y1), 2) + Math.pow((x2 - x1), 2)))
        console.log('y2- y1: ', y2-y1, 'x2 - x1', x2 - x1)
        console.log('y2- y1 ^ 2: ', Math.pow((y2 - y1), 2), 'x2 - x1 ^ 2', Math.pow((x2 - x1), 2))

        return (
          Math.abs(x * (y2 - y1) - y * (x2 - x1) + x2 * y1 - y2 * x1) /
          Math.sqrt(Math.pow((y2 - y1), 2) + Math.pow((x2 - x1), 2))
        );
      };
    
    // Testing the getDistance function:
    for (let i = 0; i < lines.length; i++) {
        line = lines[i]
        console.log({line})
        distance = getDist1(point.x, point.y, line[0].x, line[0].y, line[1].x, line[1].y)
        console.log('Distance:', point, line, distance);
    }


    console.log('nearest line:', getNearestLineToAPoint(point, lines))
}
//testGetNearestLine()


function testGetSleevePoints() {
    beams = [Line(1, 2, 1, 1), Line(1, 3, 5, 3), Line(6, 5, 6, 0)]
    line = Line(0, 0, 5, 5)
    console.log('Testing sleeve points')
    console.log(beams, line)

    sleeves = getSleevePoints(line, beams)
    console.log({sleeves})
}
testGetSleevePoints()
